<?php
namespace develnext\bundle\jurl;

use ide\bundle\AbstractBundle;
use ide\bundle\AbstractJarBundle;
use ide\formats\ScriptModuleFormat;
use ide\Ide;
use ide\project\Project;
use php\io\Stream;
use php\lib\Str;
use develnext\bundle\jurl\components\jURLDownloaderComponent;

/**
 * Class jURLBundle
 */
class jURLBundle extends AbstractJarBundle
{


    public function onAdd(Project $project, AbstractBundle $owner = null)
    {
        parent::onAdd($project, $owner);

        $this->setBootstrap($project);
        $this->installCode();


        $format = Ide::get()->getRegisteredFormat(ScriptModuleFormat::class);

        if ($format) {
            $format->register(new jURLDownloaderComponent());
        }
    }

    public function onRemove(Project $project, AbstractBundle $owner = null)
    {
        parent::onRemove($project, $owner);

        $this->setBootstrap($project);
        $this->removeCode();

        $format = Ide::get()->getRegisteredFormat(ScriptModuleFormat::class);

        if ($format) {
            $format->unregister(new jURLDownloaderComponent());
        }
    }

    public function onPreCompile($project, $env, $log = null)
    {   
        $this->installCode();
        parent::onPreCompile($project, $env, $log);
        // todo remove it!
    }

    /**
     * Чтоб подтянулись curl_* функции, объявим их 
     * в файле .bootstrap до старта приложения
     */

    private $code = 'new \cURL; // Generated by jURL bundle',
            $bootstrap;

    private function setBootstrap(Project $project){
        $this->bootstrap = $project->getRootDir() . '/src/JPHP-INF/.bootstrap';
    }

    private function installCode(){
        $code = $this->getBootstrap();
        if($code !== false and !str::contains($code, $this->code)){
            $code = Str::Replace($code, '<?php', '<?php' . "\n" . $this->code);
            $this->putBootstrap($code);
        }
    }

    private function removeCode(){
        $code = $this->getBootstrap();
        if($code !== false and str::contains($code, $this->code)){
            $code = Str::Replace($code, "\n" . $this->code, '');
            $this->putBootstrap($code);
        }
    }

    private function getBootstrap(){
        try{ 
            return Stream::getContents($this->bootstrap);
        } catch (\php\io\IOException $e){
            return false;
        }
    }

    private function putBootstrap($content){
        try{
            Stream::putContents($this->bootstrap, $content);
        } catch (\php\io\IOException $e){

        }
    }



}
