<?php
namespace develnext\bundle\jurl;

use ide\bundle\AbstractBundle;
use ide\bundle\AbstractJarBundle;
use ide\formats\ScriptModuleFormat;
use ide\Ide;
use ide\project\Project;
use php\io\Stream;
use php\lib\Str;
use develnext\bundle\jurl\components\jURLDownloaderComponent;

/**
 * Class jURLBundle
 */
class jURLBundle extends AbstractJarBundle
{


    public function onAdd(Project $project, AbstractBundle $owner = null)
    {
        parent::onAdd($project, $owner);

        $this->setBootstrap($project);
        $this->installCode();


        $format = Ide::get()->getRegisteredFormat(ScriptModuleFormat::class);

        if ($format) {
        //    $format->register(new jURLDownloaderComponent());
        }
    }

    public function onRemove(Project $project, AbstractBundle $owner = null)
    {
        parent::onRemove($project, $owner);

        $this->setBootstrap($project);
        $this->removeCode();

        $format = Ide::get()->getRegisteredFormat(ScriptModuleFormat::class);

        if ($format) {
        //    $format->unregister(new jURLDownloaderComponent());
        }
    }

    /**
     * Чтоб подтянулись curl_* функции, объявим их 
     * в файле .bootstrap до старта приложения
     */

    private $code = '<?php' . "\n" . 'new \cURL; // Generated by jURL bundle',
            $bootstrap;

    private function setBootstrap(Project $project){
        $this->bootstrap = $project->getRootDir() . '/src/JPHP-INF/.bootstrap';
    }

    private function installCode(){
        $code = $this->getBootstrap();
        $code = Str::Replace($code, '<?php', $this->code);
        $this->putBootstrap($code);
    }

    private function removeCode(){
        $code = $this->getBootstrap();
        $code = Str::Replace($code, $this->code, '<?php');
        $this->putBootstrap($code);
    }

    private function getBootstrap(){
        return Stream::getContents($this->bootstrap);
    }

    private function putBootstrap($content){
        return Stream::putContents($this->bootstrap, $content);
    }



}
